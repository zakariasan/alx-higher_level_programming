>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
>>> baseg = BaseGeometry()
>>> bg = BaseGeometry()
>>> baseg.integer_validator("value", 12)
>>> baseg.integer_validator("base", 44)
>>> baseg.integer_validator("base", 1)
>>> baseg.integer_validator(12, 12)
>>> bg.integer_validator("int_1", 12)
>>> bg.integer_validator("in", 89)
>>> try:
...     bg.integer_validator("in", 89)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
... 
>>> try:
...     bg.integer_validator("in", "89")
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
... 
[TypeError] in must be an integer
>>> try:
...     bg.integer_validator("in", -1)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
... 
[ValueError] in must be greater than 0
>>> bg.integer_validator("name1", 0)
Traceback (most recent call last):
    raise ValueError("{} must be greater than 0".format(name))
ValueError: name1 must be greater than 0
>>> bg.integer_validator("name1", -4)
Traceback (most recent call last):
    raise ValueError("{} must be greater than 0".format(name))
ValueError: name1 must be greater than 0
>>> bg.integer_validator("name1", None)
Traceback (most recent call last):
    raise TypeError("{} must be an integer".format(name))
TypeError: name1 must be an integer
>>> bg.integer_validator("Jhon", [5, 3,55])
Traceback (most recent call last):
    raise TypeError("{} must be an integer".format(name))
TypeError: Jhon must be an integer
>>> bg.integer_validator("set", (1,55,5))
Traceback (most recent call last):
    raise TypeError("{} must be an integer".format(name))
TypeError: set must be an integer
>>> bg.integer_validator("deic", {"value":1})
Traceback (most recent call last):
    raise TypeError("{} must be an integer".format(name))
TypeError: deic must be an integer
>>> bg.integer_validator("deic", {1,3})
Traceback (most recent call last):
    raise TypeError("{} must be an integer".format(name))
TypeError: deic must be an integer
>>> bg.integer_validator("int t", False)
Traceback (most recent call last):
    raise ValueError("{} must be greater than 0".format(name))
ValueError: int t must be greater than 0
>>> bg.integer_validator("int t", "1")
Traceback (most recent call last):
    raise TypeError("{} must be an integer".format(name))
TypeError: int t must be an integer
>>> bg.integer_validator("int t", -1)
Traceback (most recent call last):
    raise ValueError("{} must be greater than 0".format(name))
ValueError: int t must be greater than 0

